name: Build and release - <%= serviceName %>

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BROKER_URL: https://broker.io.nrs.gov.bc.ca
  BROKER_JWT: ${{ secrets.<%= brokerJwt %> }}
  SERVICE_PROJECT: <%= projectName %>
  SERVICE_NAME: <%= serviceName %>

jobs:
  check-token-expiration:
    name: Check token expiration
    uses: ./.github/workflows/check-token.yaml
    permissions: {}
    secrets:
      token: ${{ secrets.<%= brokerJwt %> }}
<% if (unitTestsPath) { -%>
  test:
    name: Test
    if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
    uses: <%= unitTestsPath %>
<% } -%>
  build-release:
    name: Build and release
    runs-on: ubuntu-latest
<% if (unitTestsPath) { -%>
    needs: [check-token-expiration, test]
<% } else { -%>
    needs: check-token-expiration
<% } -%>
    permissions:
      contents: read
      packages: write
      pull-requests: read
    outputs:
      project_version: ${{ steps.set-build-output-parameters.outputs.project_version }}
      intention_id: ${{ steps.set-intention-id.outputs.intention_id }}
      branch: $${{ steps.set-branch.outputs.branch }}
    steps:
      - name: Lookup PR Merge Ref
        id: lookup-pr-merge-ref
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "checkout_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
            echo "version_modifier=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref_name != 'main' }} = true ]]; then
            RESPONSE=$(curl -s "https://api.github.com/repos/<%= gitHubOwnerPack %>/pulls?head=<%= gitHubOwnerPack.split('/')[0] %>:${{ github.head_ref || github.ref_name }}&state=open&base=main" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json")
            PULL_REQUEST_NUMBER=$(echo ${RESPONSE} | jq -r .[0].number)
            echo "checkout_ref=refs/pull/$PULL_REQUEST_NUMBER/merge" >> $GITHUB_OUTPUT
            echo "version_modifier=$PULL_REQUEST_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "checkout_ref=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "version_modifier=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
            fetch-tags: true
            ref: ${{ steps.lookup-pr-merge-ref.outputs.checkout_ref }}
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set branch
        id: set-branch
        if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
        run: |
          if [[ ${{ startsWith(github.ref, 'refs/heads/') }} = true ]]; then
            echo "branch=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          fi
          if [[ ${{ startsWith(github.ref, 'refs/pull/') }} = true ]]; then
            echo "branch=${{ github.head_ref }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Update pom.xml
        id: update-repo
        shell: bash
        working-directory: ./<%= relativePath %>
        run: |
          if [[ ${{ startsWith(github.ref, 'refs/tags/v') }} = true ]]; then
            TAG=${{ github.ref_name }}
            VERSION=${TAG#v}
          else
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --file ./pom.xml)
            VERSION=${VERSION/%SNAPSHOT/${{ steps.lookup-pr-merge-ref.outputs.version_modifier }}-SNAPSHOT}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          mvn versions:set -DnewVersion=${VERSION} --file <%= pomRoot %>pom.xml
      - name: Set build output parameters
        id: set-build-output-parameters
        working-directory: ./<%= relativePath %>
        run: |
          echo "project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --file <%= pomRoot %>pom.xml)" >> $GITHUB_OUTPUT
          echo "artifact_id=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout --file <%= pomRoot %>pom.xml)" >> $GITHUB_OUTPUT
          echo "package_type=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout --file <%= pomRoot %>pom.xml)" >> $GITHUB_OUTPUT
          echo "git_commit=$(git rev-parse --verify HEAD)" >> $GITHUB_OUTPUT
          echo "build_guid=uuid::$(uuidgen)" >> $GITHUB_OUTPUT
      - name: Build intention
        run: sh ./.github/workflows/build-intention<% if (relativePath) { -%>-<%= serviceName %><% } -%>.sh
        env:
          EVENT_REASON: Build ${{ github.ref_name }}
          GITHUB_REPOSITORY: ${{ github.repository}}
          GITHUB_RUN_ID: ${{ github.run_id}}
          PACKAGE_BUILD_GUID:  ${{ steps.set-build-output-parameters.outputs.build_guid }}
          PACKAGE_BUILD_NUMBER: ${{ github.run_number }}
          PACKAGE_BUILD_VERSION: ${{ steps.set-build-output-parameters.outputs.git_commit }}
          PACKAGE_TYPE: ${{ steps.set-build-output-parameters.outputs.package_type }}
          PACKAGE_VERSION: ${{ steps.set-build-output-parameters.outputs.project_version }}
      - name: Open intention
        uses: bcgov-nr/action-broker-intention-open@v2
        with:
          broker_jwt: ${{ secrets.<%= brokerJwt %> }}
          intention_path: intention.json
          quickstart: true
      - name: Echo intention ID for deploy job
        id: set-intention-id
        run: |
          echo "intention_id=${INTENTION_ID}" >> $GITHUB_OUTPUT
        env:
          INTENTION_ID: ${{ env.INTENTION_ID }}
      - name: Publish artifact
        id: publish-artifact
        working-directory: ./<%= relativePath %>
<% if (gitHubPackages) { -%>
        run: |
          ARTIFACT_NAME="${ARTIFACT_ID}-${PROJECT_VERSION}.${PACKAGE_TYPE}"
          mvn --batch-mode -Dmaven.test.skip=true -Pgithub deploy --settings ./settings.xml --file <%= pomRoot %>pom.xml
          echo "artifact_sha256=$(sha256sum <%= pomRoot %>target/${ARTIFACT_NAME} | awk '{ print $1 }')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          PROJECT_VERSION: ${{ steps.set-build-output-parameters.outputs.project_version }}
          ARTIFACT_ID: ${{ steps.set-build-output-parameters.outputs.artifact_id }}
          PACKAGE_TYPE: ${{ steps.set-build-output-parameters.outputs.package_type }}
      - name: Send build info
        run: |
          curl -s POST ${{ env.BROKER_URL }}/v1/intention/action/patch \
              -H 'Content-Type: application/json' \
              -H 'X-Broker-Token: '"${BUILD_TOKEN}"'' \
              -d '{"package":{"checksum": "sha256:'${ARTIFACT_SHA256}'"}}'
        env:
          ARTIFACT_SHA256: ${{ steps.publish-artifact.outputs.artifact_sha256 }}
          BUILD_TOKEN: ${{ env.ACTION_TOKEN_BUILD }}
<% } else { -%>
        run: mvn --batch-mode -Dmaven.test.skip=true -Partifactory deploy --file <%= pomRoot %>pom.xml
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          BUILD_NUMBER: ${{ github.run_number }}
          BUILD_URL: ${{ github.repositoryUrl }}
      - name: Set build info
        id: set-build-info
        run: |
          BUILD_INFO=$(curl -s -u ${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_PASSWORD }} \
              https://artifacts.developer.gov.bc.ca/artifactory/api/build/${{ env.ARTIFACT_ID }}/${{ github.run_number }}?project=<%= artifactoryProject %>)
          echo "vcs_revision=$(echo ${BUILD_INFO} | jq -r '.buildInfo.vcs[0].revision')" >> $GITHUB_OUTPUT
          echo "vcs_message=$(echo ${BUILD_INFO} | jq -r '.buildInfo.vcs[0].message')" >> $GITHUB_OUTPUT
          echo "vcs_branch=$(echo ${BUILD_INFO} | jq -r '.buildInfo.vcs[0].branch')" >> $GITHUB_OUTPUT
          echo "vcs_url=$(echo ${BUILD_INFO} | jq -r '.buildInfo.vcs[0].url')" >> $GITHUB_OUTPUT
          echo "artifact_type=$(echo ${BUILD_INFO} | jq -r '.buildInfo.modules[0].artifacts[0].type')" >> $GITHUB_OUTPUT
          echo "artifact_sha1=$(echo ${BUILD_INFO} | jq -r '.buildInfo.modules[0].artifacts[0].sha1')" >> $GITHUB_OUTPUT
          echo "artifact_sha256=$(echo ${BUILD_INFO} | jq -r '.buildInfo.modules[0].artifacts[0].sha256')" >> $GITHUB_OUTPUT
          echo "artifact_md5=$(echo ${BUILD_INFO} | jq -r '.buildInfo.modules[0].artifacts[0].md5')" >> $GITHUB_OUTPUT
          echo "artifact_name=$(echo ${BUILD_INFO} | jq -r '.buildInfo.modules[0].artifacts[0].name')" >> $GITHUB_OUTPUT
        env:
          ARTIFACT_ID: ${{ steps.set-build-output-parameters.outputs.artifact_id }}
      - name: Send build info
        run: |
          curl -s -X POST ${{ env.BROKER_URL }}/v1/intention/action/patch \
              -H 'Content-Type: application/json' \
              -H 'X-Broker-Token: '"${BUILD_TOKEN}"'' \
              -d '{"package":{"checksum": "sha256:'${ARTIFACT_SHA256}'"}}'
        env:
          ARTIFACT_SHA256: ${{ steps.set-build-info.outputs.artifact_sha256 }}
          BUILD_TOKEN: ${{ env.ACTION_TOKEN_BUILD }}
<% } -%>
      - name: Close intention
        if: ${{ success() && env.INTENTION_TOKEN != '' }}
        uses: bcgov-nr/action-broker-intention-close@v3
        with:
          intention_token: ${{ env.INTENTION_TOKEN }}
      - name: Close intention (Failure)
        if: ${{ failure() && env.INTENTION_TOKEN != '' }}
        uses: bcgov-nr/action-broker-intention-close@v3
        with:
          intention_token: ${{ env.INTENTION_TOKEN }}
          outcome: failure
