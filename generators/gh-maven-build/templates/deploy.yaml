name: 'Deploy - <%= serviceName %>'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      config_branch:
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SERVICE_PROJECT: <%= projectName %>
  SERVICE_NAME: <%= serviceName %>
  JOB: buildByToken/buildWithParameters?job=<%= projectName %>/<%= serviceName %>
  URL: https://cd.io.nrs.gov.bc.ca
<% if (gitHubPackages) { -%>
  PACKAGE_REPO: https://maven.pkg.github.com/<%= gitHubOwnerPack %>
<% } else { -%>
  PACKAGE_REPO: https://artifacts.developer.gov.bc.ca/artifactory/<%= artifactoryProject %>-<%= projectName %>-<%= artifactoryPackageType %>-local
<% } -%>

jobs:
  deploy-pre-release-build:
    name: "Trigger ${{ inputs.environment }} deploy"
    if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      packages: read
      pull-requests: read
    outputs:
      project_version: ${{ steps.set-build-output.outputs.project_version }}
      build_guid: ${{ steps.set-build-output.outputs.build_guid }}
      build_number: ${{ steps.set-build-output.outputs.build_number }}
      artifact_name: ${{ steps.set-build-output.outputs.artifact_name }}
      artifact_sha256: ${{ steps.set-build-output.outputs.artifact_sha256 }}
      download_url: ${{ steps.set-download-url.outputs.download_url }}
    steps:
      - name: Lookup PR Merge Ref
        id: lookup-pr-merge-ref
        run: |
          if [[ ${{ github.ref_name != 'main' }} = true ]]; then
            RESPONSE=$(curl -s "https://api.github.com/repos/<%= gitHubOwnerPack %>/pulls?head=<%= gitHubOwnerPack.split('/')[0] %>:${{ github.ref_name }}&state=open&base=main" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json")
            echo "build_sha=$(echo ${RESPONSE} | jq -r .[0].merge_commit_sha)" >> $GITHUB_OUTPUT
            echo "checkout_ref=refs/pull/$(echo ${RESPONSE} | jq -r .[0].number)/merge" >> $GITHUB_OUTPUT
          else
            echo "build_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "checkout_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
          fi
      - name: Set build output
        id: set-build-output
        run: |
          RESPONSE=$(curl -s -X 'POST' \
            "${BROKER_URL}/v1/intention/search?where=%7B%22actions.action%22%3A%22package-build%22%2C%22actions.service.project%22%3A%22${SERVICE_PROJECT}%22%2C%22actions.service.name%22%3A%22${SERVICE_NAME}%22%2C%22actions.package.buildVersion%22%3A%22${BUILD_SHA}%22%7D&offset=0&limit=1" \
            -H 'accept: application/json' \
            -H 'Authorization: Bearer '"${BROKER_JWT}"'' \
            -d '')
          echo "Broker API response:"
          echo "$RESPONSE"
          if echo "$RESPONSE" | jq -e '.statusCode == 401' > /dev/null; then
            echo "Status code is 401. This indicates an authorization error."
            echo "Please check if your Broker Token is valid. Teams can generate a new one in Broker if needed."
            echo "Link: https://broker.io.nrs.gov.bc.ca/browse/brokerAccount"
            echo "Exiting..."
            exit 1
          fi
          if [ "$(echo "$RESPONSE" | jq '.data | length')" -eq 0 ] || \
             [ "$(echo "$RESPONSE" | jq '.data[].actions[].artifacts | length')" -eq 0 ]; then
            echo
            echo "============================================================"
            echo "Error: Broker API response data is empty."
            echo "------------------------------------------------------------"
            echo "Explanation: No build information was found for this commit."
            echo "Why it matters: The deployment cannot proceed without build metadata."
            echo "Check if the most recent build completed and published the artifact to Broker."
            echo "--- Broker API response below ---"
            echo "$RESPONSE"
            echo "============================================================"
            echo
            exit 1
          fi
          echo "project_version=$(echo ${RESPONSE} | jq -r '.data[].actions[].package.version')" >> $GITHUB_OUTPUT
          echo "build_guid=$(echo ${RESPONSE} | jq -r '.data[].id')" >> $GITHUB_OUTPUT
          echo "build_number=$(echo ${RESPONSE} | jq -r '.data[].actions[].package.buildNumber')" >> $GITHUB_OUTPUT
          echo "artifact_name=$(echo ${RESPONSE} | jq -r '.data[].actions[].artifacts[].name')" >> $GITHUB_OUTPUT
          artifact_checksum=$(echo ${RESPONSE} | jq -r '.data[].actions[].artifacts[].checksum')
          echo "artifact_sha256=${artifact_checksum#sha256:}" >> $GITHUB_OUTPUT
        env:
          BROKER_URL: https://broker.io.nrs.gov.bc.ca
          BROKER_JWT: ${{ secrets.<%= brokerJwt %> }}
          SERVICE_PROJECT: ${{ env.SERVICE_PROJECT }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          BUILD_SHA: ${{ steps.lookup-pr-merge-ref.outputs.build_sha }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
            fetch-tags: true
            ref: ${{ steps.lookup-pr-merge-ref.outputs.checkout_ref }}
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set download URL
        id: set-download-url
        working-directory: ./<%= relativePath %>
<% if (gitHubPackages) { -%>
        run: |
          set -e
          sudo apt-get update
          sudo apt-get -qq install libxml2-utils
          GROUP_ID=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout --file <%= pomRoot %>pom.xml)
          GROUP_ID_PATH="${GROUP_ID//.//}"
          PACKAGE_TYPE=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout --file <%= pomRoot %>pom.xml)
          CURL_RESPONSE=$(curl -w "\n%{http_code}" -LO "${PACKAGE_REPO}/${GROUP_ID_PATH}/${SERVICE_NAME}/${PROJECT_VERSION}/maven-metadata.xml" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}")
          HTTP_STATUS=$(echo "$CURL_RESPONSE" | tail -n1)
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo
            echo "============================================================"
            echo "Error: Failed to download maven-metadata.xml (HTTP $HTTP_STATUS)"
            echo "------------------------------------------------------------"
            echo "Curl response:"
            echo "$CURL_RESPONSE"
            echo "============================================================"
            echo
            exit 1
          fi
          if ! grep -q "<timestamp>" maven-metadata.xml || ! grep -q "<buildNumber>" maven-metadata.xml; then
            echo
            echo "============================================================"
            echo "Error: maven-metadata.xml does not contain <timestamp> or <buildNumber>."
            echo "------------------------------------------------------------"
            echo "Explanation: This usually means the artifact is not a snapshot build, or the metadata is missing/corrupted."
            echo "Why it matters: Without <timestamp> and <buildNumber>, the workflow cannot construct the correct snapshot artifact filename, so the deployment cannot proceed."
            echo "Check if the build published a snapshot and if the repository is correct."
            echo "--- maven-metadata.xml contents below ---"
            cat maven-metadata.xml
            echo "============================================================"
            echo
            exit 1
          fi
          TIMESTAMP=$(xmllint --xpath 'string(//metadata/versioning/snapshot/timestamp)' maven-metadata.xml)
          BUILD_NUMBER=$(xmllint --xpath 'string(//metadata/versioning/snapshot/buildNumber)' maven-metadata.xml)
          if [ -z "$TIMESTAMP" ] || [ -z "$BUILD_NUMBER" ]; then
            echo
            echo "============================================================"
            echo "Error: Could not extract timestamp or buildNumber from maven-metadata.xml"
            echo "------------------------------------------------------------"
            echo "Explanation: The XML structure may be different than expected, or the snapshot build did not complete properly."
            echo "Why it matters: Without these values, the workflow cannot determine the correct artifact version to download, so deployment will fail."
            echo "Verify the contents of maven-metadata.xml and ensure the build process published the snapshot."
            cat maven-metadata.xml
            echo "============================================================"
            echo
            exit 1
          fi
          SNAPSHOT_VERSION="${PROJECT_VERSION//SNAPSHOT/$TIMESTAMP-$BUILD_NUMBER}"
          ARTIFACT_NAME="${SERVICE_NAME}-${SNAPSHOT_VERSION}.${PACKAGE_TYPE}"
          DOWNLOAD_URL="${PACKAGE_REPO}/${GROUP_ID_PATH}/${SERVICE_NAME}/${PROJECT_VERSION}/${ARTIFACT_NAME}"
          echo "${DOWNLOAD_URL}"
          echo "download_url=$(echo ${DOWNLOAD_URL})" >> $GITHUB_OUTPUT
<% } else { -%>
        run: |
          sudo apt-get -qq install libxml2-utils
          GROUP_ID=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout --file <%= pomRoot %>pom.xml)
          GROUP_ID_PATH="${GROUP_ID//.//}"
          PACKAGE_TYPE=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout --file <%= pomRoot %>pom.xml)
          SNAPSHOT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --file <%= pomRoot %>pom.xml)
          ARTIFACT_NAME="${SERVICE_NAME}-${SNAPSHOT_VERSION}.${PACKAGE_TYPE}"
          DOWNLOAD_URL="${PACKAGE_REPO}/${GROUP_ID_PATH}/${SERVICE_NAME}/${PROJECT_VERSION}/${ARTIFACT_NAME}"
          echo "${DOWNLOAD_URL}"
          echo "download_url=$(echo ${DOWNLOAD_URL})" >> $GITHUB_OUTPUT
<% } -%>
        env:
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          PROJECT_VERSION: ${{ steps.set-build-output.outputs.project_version }}
          PACKAGE_REPO: ${{ env.PACKAGE_REPO }}
  deploy-release-build:
    name: Trigger production deployment
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      packages: read
    outputs:
      project_version: ${{ steps.set-tag-output.outputs.project_version }}
      build_guid: ${{ steps.set-tag-output.outputs.build_guid }}
      build_number: ${{ steps.set-tag-output.outputs.build_number }}
      artifact_name: ${{ steps.set-tag-output.outputs.artifact_name }}
      artifact_sha256: ${{ steps.set-tag-output.outputs.artifact_sha256 }}
      download_url: ${{ steps.set-download-url.outputs.download_url }}
    steps:
      - name: Set tag output
        id: set-tag-output
        run: |
          TAG=${{ github.ref_name }}
          PROJECT_VERSION=${TAG#v}
          RESPONSE=$(curl -s -X 'POST' \
            "${BROKER_URL}/v1/intention/search?where=%7B%22actions.action%22%3A%22package-build%22%2C%22actions.service.project%22%3A%22${SERVICE_PROJECT}%22%2C%22actions.service.name%22%3A%22${SERVICE_NAME}%22%2C%22actions.package.version%22%3A%22${PROJECT_VERSION}%22%7D&offset=0&limit=1" \
            -H 'accept: application/json' \
            -H 'Authorization: Bearer '"${BROKER_JWT}"'' \
            -d '')
          if echo "$RESPONSE" | jq -e '.statusCode == 401' > /dev/null; then
            echo "Status code is 401. This indicates an authorization error."
            echo "Please check if your Broker Token is valid. Teams can generate a new one in Broker if needed."
            echo "Link: https://broker.io.nrs.gov.bc.ca/browse/brokerAccount"
            echo "Exiting..."
            exit 1
          fi
          if [ "$(echo "$RESPONSE" | jq '.data | length')" -eq 0 ] || \
             [ "$(echo "$RESPONSE" | jq '.data[].actions[].artifacts | length')" -eq 0 ]; then
            echo
            echo "============================================================"
            echo "Error: Broker API response data is empty."
            echo "------------------------------------------------------------"
            echo "Explanation: No build information was found for this tag."
            echo "Why it matters: The deployment cannot proceed without build metadata."
            echo "Check if the most recent build completed and published the artifact to Broker."
            echo "--- Broker API response below ---"
            echo "$RESPONSE"
            echo "============================================================"
            echo
            exit 1
          fi
          echo "project_version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "build_guid=$(echo ${RESPONSE} | jq -r '.data[].id')" >> $GITHUB_OUTPUT
          echo "build_number=$(echo ${RESPONSE} | jq -r '.data[].actions[].package.buildNumber')" >> $GITHUB_OUTPUT
          echo "artifact_name=$(echo ${RESPONSE} | jq -r '.data[].actions[].artifacts[].name')" >> $GITHUB_OUTPUT
          artifact_checksum=$(echo ${RESPONSE} | jq -r '.data[].actions[].artifacts[].checksum')
          echo "artifact_sha256=${artifact_checksum#sha256:}" >> $GITHUB_OUTPUT
        env:
          BROKER_URL: https://broker.io.nrs.gov.bc.ca
          BROKER_JWT: ${{ secrets.<%= brokerJwt %> }}
          SERVICE_PROJECT: ${{ env.SERVICE_PROJECT }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
            fetch-tags: true
            ref: ${{ github.ref }}
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set download URL
        id: set-download-url
        working-directory: ./<%= relativePath %>
        run: |
          set -e
          sudo apt-get update
          sudo apt-get -qq install libxml2-utils
          GROUP_ID=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout --file <%= pomRoot %>pom.xml)
          GROUP_ID_PATH="${GROUP_ID//.//}"
          PACKAGE_TYPE=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout --file <%= pomRoot %>pom.xml)
          ARTIFACT_NAME="${SERVICE_NAME}-${PROJECT_VERSION}.${PACKAGE_TYPE}"
          DOWNLOAD_URL="${PACKAGE_REPO}/${GROUP_ID_PATH}/${SERVICE_NAME}/${PROJECT_VERSION}/${ARTIFACT_NAME}"
          if [ -z "$GROUP_ID" ] || [ -z "$PACKAGE_TYPE" ] || [ -z "$ARTIFACT_NAME" ] || [ -z "$DOWNLOAD_URL" ]; then
            echo
            echo "============================================================"
            echo "Error: Failed to construct the download URL for the release artifact."
            echo "------------------------------------------------------------"
            echo "Explanation: One or more required values (groupId, packaging, artifact name, or download URL) could not be determined."
            echo "Why it matters: Without a valid download URL, the workflow cannot retrieve the release artifact, so deployment cannot proceed."
            echo "Check that the pom.xml is present and contains valid groupId and packaging, and that environment variables are set correctly."
            echo "============================================================"
            echo
            exit 1
          fi
          echo "${DOWNLOAD_URL}"
          echo "download_url=$(echo ${DOWNLOAD_URL})" >> $GITHUB_OUTPUT
        env:
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          PROJECT_VERSION: ${{ steps.set-tag-output.outputs.project_version }}
          PACKAGE_REPO: ${{ env.PACKAGE_REPO }}
  submit-deployment-job:
    name: Submit deployment job
    if: |
      always() &&
      ((needs.deploy-pre-release-build.result == 'success' && needs.deploy-release-build.result == 'skipped') ||
      (needs.deploy-pre-release-build.result == 'skipped' && needs.deploy-release-build.result == 'success'))
    needs: [deploy-pre-release-build, deploy-release-build]
    permissions:
      actions: read
      packages: read
      contents: read
    runs-on: ubuntu-latest
    steps:
      # See: https://github.com/bcgov-nr/polaris-pipelines
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}
      - name: Get deployment approver
        id: get-deployment-approver
        run: |
          set -e
          ENVIRONMENT="${{ inputs.environment }}"
          REPO="${{ github.repository }}"

          # Get environment info from the repo's deployment environments endpoint
          ENV_INFO=$(gh api repos/${REPO}/environments/${ENVIRONMENT})
          REVIEWERS=$(echo "$ENV_INFO" | jq -r '.protection_rules[]? | select(.reviewers != null) | .reviewers[0] // false')
          if [[ -z "$REVIEWERS" ]]; then
            REVIEWERS_REQUIRED=false
          else
            REVIEWERS_REQUIRED=true
          fi

          if [[ "$REVIEWERS_REQUIRED" == "true" ]]; then
            # Reviewers are required, get the approver from approvals endpoint
            RUN_ID="${{ github.run_id }}"
            APPROVALS_JSON=$(gh api repos/${REPO}/actions/runs/${RUN_ID}/approvals)
            APPROVER_ID=$(echo "$APPROVALS_JSON" | jq -r --arg ENVIRONMENT "$ENVIRONMENT" \
              '.[] | select(.environments[]?.name == $ENVIRONMENT) | .user.id // empty')
            if [[ -z "$APPROVER_ID" ]]; then
              echo "No approver found for run ID: $RUN_ID"
              exit 1
            fi
            echo "approver_id=${APPROVER_ID}@GitHub" >> $GITHUB_OUTPUT
          else
            # No reviewers required, use the GitHub actor's user id as the approver
            ACTOR_ID=$(gh api users/${{ github.actor }} | jq -r '.id')
            echo "approver_id=${ACTOR_ID}@GitHub" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Submit deployment job
        id: submit-job
        run: |
          # Record the timestamp in ISO 8601 format
          GH_TASK_START=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          echo "gh_task_start=$GH_TASK_START" >> $GITHUB_OUTPUT

          # Require DEPLOYMENT_APPROVER in guid@GitHub format
          if [[ -n "${{ steps.get-deployment-approver.outputs.approver_id }}" ]]; then
            DEPLOYMENT_APPROVER="${{ steps.get-deployment-approver.outputs.approver_id }}"
          else
            echo "Error: No deployment approver found. Failing deployment."
            exit 1
          fi
          curl \
          --data-urlencode "token=${{ secrets.JENKINS_TOKEN }}" \
          --data-urlencode "githubRunId=${{ github.run_id }}" \
          --data-urlencode "githubToken=${{ secrets.GITHUB_TOKEN }}" \
          --data-urlencode "brokerJwt=${{ secrets.<%= brokerJwt %> }}" \
          --data-urlencode "artifactSha256=${ARTIFACT_SHA256}" \
          --data-urlencode "projectVersion=${PROJECT_VERSION}" \
          --data-urlencode "gitBranch=${{ github.ref_name }}" \
          --data-urlencode "intentionId=${BUILD_GUID}" \
          --data-urlencode "gitTag=${{ (startsWith(github.ref, 'refs/tags/') && github.ref_name) || '' }}" \
          --data-urlencode "configBranch=${{ inputs.config_branch || '' }}" \
          --data-urlencode "downloadUrl=${DOWNLOAD_URL}" \
          --data-urlencode "downloadType=<% if (gitHubPackages) { -%>GITHUB<% } else { -%>ARTIFACTORY<% } -%>" \
          --data-urlencode "envLong=${{ inputs.environment }}" \
          --data-urlencode "triggerUrl=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          --data-urlencode "deploymentApprover=${DEPLOYMENT_APPROVER}" \
          -H "Connection: close" \
          ${{ env.URL }}/${{ env.JOB }}
        env:
          PROJECT_VERSION: ${{ needs.deploy-pre-release-build.outputs.project_version || needs.deploy-release-build.outputs.project_version }}
          BUILD_GUID: ${{ needs.deploy-pre-release-build.outputs.build_guid || needs.deploy-release-build.outputs.build_guid }}
          BUILD_NUMBER: ${{ needs.deploy-pre-release-build.outputs.build_number || needs.deploy-release-build.outputs.build_number }}
          ARTIFACT_SHA256: ${{ needs.deploy-pre-release-build.outputs.artifact_sha256 || needs.deploy-release-build.outputs.artifact_sha256 }}
          DOWNLOAD_URL: ${{ needs.deploy-pre-release-build.outputs.download_url || needs.deploy-release-build.outputs.download_url }}
      - name: Display deployment job URL
        run: |
          DEPLOYMENT_JOB_URL="${{ env.URL }}/job/${{ env.SERVICE_PROJECT }}/job/${{ env.SERVICE_NAME }}/"
          echo "Deployment job URL: ${DEPLOYMENT_JOB_URL}"

      - name: Wait for Jenkins deployment job to be triggered and completed
        id: check-jenkins-job-status
        run: ./.github/workflows/check-deploy-job-status.sh
        env:
          GH_TASK_START: ${{ steps.submit-job.outputs.gh_task_start }}
          BROKER_URL: https://broker.io.nrs.gov.bc.ca
          BROKER_JWT: ${{ secrets.<%= brokerJwt %> }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          GITHUB_RUN_ID: ${{ github.run_id }}
